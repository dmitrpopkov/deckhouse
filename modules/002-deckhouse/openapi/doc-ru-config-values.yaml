properties:
  logLevel:
    description: |
      Уровень логирования Deckhouse.
  bundle:
    description: |
      [Набор модулей](../../#наборы-модулей) Deckhouse. Определяет включенные по умолчанию модули:
      - `Default` — рекомендованный набор модулей для работы кластера: мониторинга, контроля авторизации, организации работы сети и других потребностей.
      - `Managed` — поставка для managed-кластеров от облачных провайдеров (например, Google Kubernetes Engine).
      - `Minimal` — минимально возможная поставка, которая включает единственный модуль (этот). **Обратите внимание**, что в набор модулей `Minimal` не включен ряд базовых модулей (например, модуль работы с CNI). Deckhouse с набором модулей `Minimal` без включения базовых модулей сможет работать только в уже развернутом кластере.
  releaseChannel:
    description: |
      Канал обновлений Deckhouse.

      При изменении канала обновлений переключение Deckhouse на версию, соответствующую выбранному каналу обновлений, может произойти не сразу, а когда появится такая возможность. Например, Deckhouse не обновится автоматически на меньшую минорную версию. Читайте подробнее о том, [что происходит при смене канала обновлений...](../../deckhouse-faq.html#что-происходит-при-смене-канала-обновлений)

      Если параметр `releaseChannel` не указан, то обновление Deckhouse полностью отключается (даже обновление patch-версий).

      > **Внимание!** Если параметр `releaseChannel` не был указан, то при его указании произойдет безусловная смена версии Deckhouse на версию, соответствующую выбранному каналу обновлений (с учетом режима обновлений и окон). В этом случае возможно переключение Deckhouse через несколько минорных версий (например, с `1.42` сразу на `1.48`) или на версию ниже текущей. Откат на меньшую минорную версию и непоследовательное обновление минорных версий Deckhouse не поддерживается и может привести к непредсказуемым последствиям.

      Порядок возрастания стабильности канала обновлений (от **наименее** стабильного, к **наиболее** стабильному): `Alpha`, `Beta`, `EarlyAccess`, `Stable`, `RockSolid`.
  update:
    description: |
      Управление настройками обновления Deckhouse.

      Обновление Deckhouse работает только если канал обновлений установлен в параметре [releaseChannel](#parameters-releasechannel).
    properties:
      mode:
        description: |
          Режим обновления минорной версии Deckhouse (обновление релиза). **Не влияет на обновление patch-версии** (patch-релиза).
          - `Auto` — все обновления применяются автоматически.

            Обновление минорной версии Deckhouse (например, с `1.26.*` на `1.27.*`) применяется с учетом заданных [окон обновлений](#parameters-update-windows). Если окна обновлений не заданы, обновление применяется сразу же после его появления на соответствующем канале обновлений (возможна небольшая случайная задержка);
          - `Manual` — для обновления минорной версии Deckhouse (обновление релиза, например, с `1.26.*` на `1.27.*`) необходимо ручное подтверждение.

            Для подтверждения обновления в соответствующем custom resource [`DeckhouseRelease`](cr.html#deckhouserelease) необходимо установить поле `approved` в `true`.
      disruptionApprovalMode:
        description: |
          Управление режимом применения потенциально опасных обновлений (disruptive-обновлений). Такое обновление может привести к временному прерыванию работы важного компонента кластера, пользовательского приложения или связанных систем, а также переопределить значение по умолчанию или изменить поведение некоторых модулей:
          - `Auto` — disruptive-обновления применяются автоматически.
          - `Manual` — для применения disruptive-обновления требуется ручное подтверждение (установка аннотации `release.deckhouse.io/disruption-approved=true` на соответствующем ресурсе `DeckhouseRelease`).

          Параметр `disruptionApprovalMode` влияет только на применение disruptive-обновлений, но не влияет на применение обычных обновлений (см. параметр [update.mode](#parameters-update-mode)).

          > Вы также можете настроить окна disruption-обновлений узлов с помощью параметра [`disruptions.automatic.windows`](../040-node-manager/cr.html#nodegroup-v1-spec-disruptions-automatic-windows) ресурса `NodeGroup`.
      windows:
        description: |
          Список окон обновлений в течение суток.

          Окна обновлений учитываются **только** при установленном **автоматическом** режиме обновлений (см. параметр [update.mode](#parameters-update-mode)).
        items:
          properties:
            from:
              description: |
                Время начала окна обновления (в часовом поясе UTC).

                Должно быть меньше времени окончания окна обновления.
            to:
              description: |
                Время окончания окна обновления (в часовом поясе UTC).

                Должно быть больше времени начала окна обновления.
            days:
              description: Дни недели, в которые применяется окно обновлений.
              items:
                description: День недели.
      notification:
        type: object
        description: |
          Настройки отправки оповещений о запланированном обновлении Deckhouse.

          Задаётся в виде строки с указанием часов и минут: 30m, 1h, 2h30m, 24h.

          Оповещения отправляются **только** при установленном [автоматическом режиме](#parameters-update-mode) обновлений.

          Оповещения отправляются **только** о смене минорных версий Deckhouse — об изменении patch-версий оповещения не отправляются.
        properties:
          webhook:
            description: |
              URL-адрес webhook'а.

              Вызов webhook'а произойдет после появления новой минорной версии Deckhouse на используемом канале обновлений, но до момента ее применения в кластере.

              > Используйте параметр [minimalNotificationTime](#parameters-update-notification-minimalnotificationtime) при необходимости установить минимальное время, которое должно пройти перед обновлением с момента оповещения.

              На адрес webhook'а выполняется POST-запрос с `Content-Type: application/json`. Пример содержания запроса:

              ```json
              {
                "version": "1.36",
                "requirements":  {"k8s": "1.20.0"},
                "changelogLink": "https://github.com/deckhouse/deckhouse/changelog/1.36.md",
                "applyTime": "2023-01-01T14:30:00Z00:00",
                "message": "New Deckhouse Release 1.36 is available. Release will be applied at: Friday, 01-Jan-23 14:30:00 UTC"
              }
              ```

              Описание полей POST-запроса:
              - `version` — строка, номер минорной версии;
              - `requirements` — объект, требования к версии;
              - `changelogLink` — строка, ссылка на список изменений (changelog) минорной версии;
              - `applyTime` — строка, дата и время запланированного обновления (с учетом установленных окон обновлений) в формате `RFC3339`;
              - `message` — строка, текстовое сообщение о доступности новой минорной версии и запланированном времени обновления.
          tlsSkipVerify:
            description: Пропустить валидацию TLS сертификата при запросе webhook.
          minimalNotificationTime:
            description: |
              Минимальное время которое должно пройти перед обновлением с момента оповещения.

              Механизм обновления гарантирует, что Deckhouse не обновится раньше указанного времени.

              При использовании окон обновлений, обновление Deckhouse после оповещения произойдет в ближайшее возможное окно обновлений, но не ранее чем истечет указанное в `minimalNotificationTime` время.
          auth:
            description: |
              Структура, описывающая способ авторизации на webhook.

              Если не указано — авторизация не используется.
            properties:
              basic:
                type: object
                description: Basic-аутентификация на webhook.
                properties:
                  username:
                    type: string
                    description: |
                      Имя пользователя для авторизации на webhook.

                      Имя и пароль пользователя будут в заголовке `Authorization` в формате `Basic <base64(username:password)>`.
                  password:
                    type: string
                    description: |
                      Пароль для авторизации на webhook.

                      Имя и пароль пользователя будут в заголовке `Authorization` в формате `Basic <base64(username:password)>`.
              bearerToken:
                type: string
                description: |
                    Токен для авторизации на webhook.

                    Токен будет в заголовке `Authorization` в формате `Bearer <token>`.
  nodeSelector:
    description: |
      Структура, аналогичная `spec.nodeSelector` Kubernetes Pod.

      Если ничего не указано или указано `false` — `nodeSelector` будет определяться [автоматически](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).

      **Внимание!** Deckhouse перестанет работать, если в `nodeSelector` указать несуществующий лейбл. Для восстановления работоспособности необходимо изменить значения на правильные в `ModuleConfig/deckhouse` и в `deployment/deckhouse`.
  tolerations:
    description: |
      Структура, аналогичная  `spec.tolerations` в Kubernetes Pod.

      Если ничего не указано или указано `false` — `tolerations` будет определяться [автоматически](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).

      **Внимание!** Deckhouse перестанет работать, если указать некорректные `tolerations`. Для восстановления работоспособности необходимо изменить значения на корректные в `ModuleConfig/deckhouse` и в `deployment/deckhouse`.
